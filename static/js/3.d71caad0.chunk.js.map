{"version":3,"sources":["components/common/Tabs/Tabs.tsx","components/Functions/Anagram.tsx","components/Functions/code.ts"],"names":["Tabs","react","js","useState","activeTab","setActiveTab","className","onClick","id","role","Anagram","inputVal","setInputVal","inputVal2","setInputVal2","result","setResult","showCode","setShowCode","useEffect","anagram","string1","string2","str1","replace","toLowerCase","split","str2","length","first","filter","i","includes","second","type","name","value","onChange","target"],"mappings":"kKAMaA,EAA6B,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAAS,EACzBC,mBAAiB,SADQ,mBACpDC,EADoD,KACzCC,EADyC,KAE3D,OACE,oCACE,wBAAIC,UAAU,gBACZ,wBAAIA,UAAU,WAAWC,QAAS,kBAAMF,EAAa,WACnD,0BAAMC,UAAS,mBAA4B,UAAdF,EAAwB,SAAW,KAAhE,UAIF,wBAAIE,UAAU,WAAWC,QAAS,kBAAMF,EAAa,QACnD,0BAAMC,UAAS,mBAA4B,OAAdF,EAAqB,SAAW,KAA7D,gBAMJ,yBAAKE,UAAU,cAAcE,GAAG,gBAC9B,yBACEF,UAAS,wBACO,UAAdF,EAAwB,cAAgB,IAE1CK,KAAK,YAEL,6BAAMR,IAER,yBACEK,UAAS,wBAAiC,OAAdF,EAAqB,cAAgB,IACjEK,KAAK,YAEL,6BAAMP,OCmCDQ,UAnEC,WAAO,IAAD,EACYP,mBAAiB,UAD7B,mBACbQ,EADa,KACHC,EADG,OAEcT,mBAAiB,UAF/B,mBAEbU,EAFa,KAEFC,EAFE,OAGQX,mBAAiB,UAHzB,mBAGbY,EAHa,KAGLC,EAHK,OAIYb,oBAAkB,GAJ9B,mBAIbc,EAJa,KAIHC,EAJG,KAMpBC,qBAAU,WACRC,EAAQT,EAAUE,KACjB,CAACF,EAAUE,IAEd,IAAMO,EAAU,SAACC,EAAiBC,GAChC,IAAMC,EAAsBF,EACzBG,QAAQ,QAAS,IACjBC,cACAC,MAAM,IACHC,EAAsBL,EACzBE,QAAQ,QAAS,IACjBC,cACAC,MAAM,IAET,GAAIH,EAAKK,SAAWD,EAAKC,OAAzB,CAKA,IAAMC,EAAQN,EAAKO,QAAO,SAACC,GAAD,OAAOJ,EAAKK,SAASD,MAAIH,SAAWL,EAAKK,OAC7DK,EAASN,EAAKG,QAAO,SAACC,GAAD,OAAOR,EAAKS,SAASD,MAAIH,SAAWD,EAAKC,OAGhEZ,EADJa,GAASI,EACK,oFACA,6GATZjB,EAAU,yGAYd,OACE,yBAAKV,UAAU,WACb,uCACA,uhCAMA,2BACE4B,KAAK,OACLC,KAAK,QACLC,MAAOzB,EACP0B,SAAU,gBAAaD,EAAb,EAAGE,OAAUF,MAAb,OAA2BxB,EAAYwB,MAEnD,2BACEF,KAAK,OACLC,KAAK,SACLC,MAAOvB,EACPwB,SAAU,gBAAaD,EAAb,EAAGE,OAAUF,MAAb,OAA2BtB,EAAasB,MAGpD,wCAAcrB,GACd,4BACET,UAAU,kBACVC,QAAS,kBAAMW,GAAaD,KAE1BA,EAAyB,YAAd,aAEdA,GAAY,kBAAC,EAAD,CAAMhB,MClEH,k2BDkEqBC,GCxCvB","file":"static/js/3.d71caad0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\ninterface ITabsProps {\r\n  [key: string]: any;\r\n}\r\n\r\nexport const Tabs: React.FC<ITabsProps> = ({ react, js }) => {\r\n  const [activeTab, setActiveTab] = useState<string>(\"react\");\r\n  return (\r\n    <>\r\n      <ul className=\"nav nav-tabs\">\r\n        <li className=\"nav-item\" onClick={() => setActiveTab(\"react\")}>\r\n          <span className={`nav-link ${activeTab === \"react\" ? \"active\" : \"\"}`}>\r\n            React\r\n          </span>\r\n        </li>\r\n        <li className=\"nav-item\" onClick={() => setActiveTab(\"js\")}>\r\n          <span className={`nav-link ${activeTab === \"js\" ? \"active\" : \"\"}`}>\r\n            Vanilla JS\r\n          </span>\r\n        </li>\r\n      </ul>\r\n\r\n      <div className=\"tab-content\" id=\"myTabContent\">\r\n        <div\r\n          className={`tab-pane fade ${\r\n            activeTab === \"react\" ? \"show active\" : \"\"\r\n          }`}\r\n          role=\"tabpanel\"\r\n        >\r\n          <pre>{react}</pre>\r\n        </div>\r\n        <div\r\n          className={`tab-pane fade ${activeTab === \"js\" ? \"show active\" : \"\"}`}\r\n          role=\"tabpanel\"\r\n        >\r\n          <pre>{js}</pre>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { reactCode, vanilla } from \"./code\";\r\nimport { Tabs } from \"../common/Tabs/Tabs\";\r\n\r\nconst Anagram = () => {\r\n  const [inputVal, setInputVal] = useState<string>(\"finder\");\r\n  const [inputVal2, setInputVal2] = useState<string>(\"Friend\");\r\n  const [result, setResult] = useState<string>(\"Friend\");\r\n  const [showCode, setShowCode] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    anagram(inputVal, inputVal2);\r\n  }, [inputVal, inputVal2]);\r\n\r\n  const anagram = (string1: string, string2: string) => {\r\n    const str1: Array<string> = string1\r\n      .replace(/[^w]/g, \"\")\r\n      .toLowerCase()\r\n      .split(\"\");\r\n    const str2: Array<string> = string2\r\n      .replace(/[^w]/g, \"\")\r\n      .toLowerCase()\r\n      .split(\"\");\r\n\r\n    if (str1.length !== str2.length) {\r\n      setResult(\"Нет, это не анаграма\");\r\n      return;\r\n    }\r\n\r\n    const first = str1.filter((i) => str2.includes(i)).length === str1.length;\r\n    const second = str2.filter((i) => str1.includes(i)).length === str2.length;\r\n\r\n    first && second\r\n      ? setResult(\"Да, это анаграма\")\r\n      : setResult(\"Нет, это не анаграма\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"Anagram\">\r\n      <h3>Anagram</h3>\r\n      <p>\r\n        Нужно написать функцию, которая проверяет, являются ли две строки\r\n        анаграммами, причем регистр букв не имеет значения. Учитываются лишь\r\n        символы; пробелы или знаки препинания в расчет не берутся. finder and\r\n        Friend\r\n      </p>\r\n      <input\r\n        type=\"text\"\r\n        name=\"first\"\r\n        value={inputVal}\r\n        onChange={({ target: { value } }) => setInputVal(value)}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        name=\"second\"\r\n        value={inputVal2}\r\n        onChange={({ target: { value } }) => setInputVal2(value)}\r\n      />\r\n\r\n      <div>Result: {result}</div>\r\n      <button\r\n        className=\"btn btn-success\"\r\n        onClick={() => setShowCode(!showCode)}\r\n      >\r\n        {!showCode ? \"Show code\" : \"Hide code\"}\r\n      </button>\r\n      {showCode && <Tabs react={reactCode} js={vanilla} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Anagram;\r\n","export const reactCode = `\r\nconst anagram = (string1: string, string2: string) => {\r\n  const str1: Array<string> = string1\r\n    .replace(/[^w]/g, \"\")\r\n    .toLowerCase()\r\n    .split(\"\");\r\n    \r\n  const str2: Array<string> = string2\r\n    .replace(/[^w]/g, \"\")\r\n    .toLowerCase()\r\n    .split(\"\");\r\n\r\n  if (str1.length !== str2.length) {\r\n    setResult(\"Нет, это не анаграма\");\r\n    return;\r\n  }\r\n\r\n  const first = str1.filter((i) => str2.includes(i)).length === str1.length;\r\n  const second = str2.filter((i) => str1.includes(i)).length === str2.length;\r\n\r\n  first && second\r\n    ? setResult(\"Да, это анаграма\")\r\n    : setResult(\"Нет, это не анаграма\");\r\n};      \r\n`;\r\n\r\nexport const vanilla = `\r\nfunction anagram(str1 = \"finder\", str2 = \"Friend\") {\r\n  str1 = str1\r\n    .replace(/[^w]/g, \"\")\r\n    .toLowerCase()\r\n    .split(\"\");\r\n\r\n  str2 = str2\r\n    .replace(/[^w]/g, \"\")\r\n    .toLowerCase()\r\n    .split(\"\");\r\n\r\n  if (str1.length !== str2.length) {\r\n    return false;\r\n  }\r\n\r\n  const first = str1.filter(i => str2.includes(i)).length === str1.length;\r\n  const second = str2.filter(i => str1.includes(i)).length === str2.length;\r\n\r\n  return first && second;\r\n}\r\n`;\r\n"],"sourceRoot":""}