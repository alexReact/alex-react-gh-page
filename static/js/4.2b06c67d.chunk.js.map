{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Functions/code.ts","components/common/Tabs/Tabs.tsx","components/Functions/Anagram.tsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","TypeError","CODE_OBG","anagram","title","question","code","Tabs","useState","activeTab","setActiveTab","className","map","key","onClick","id","role","Anagram","inputVal","setInputVal","inputVal2","setInputVal2","result","setResult","showCode","setShowCode","useEffect","string1","string2","str1","replace","toLowerCase","split","str2","first","filter","includes","second","console","log","type","onChange","target"],"mappings":"+HAGe,SAASA,EAAeC,EAAKC,GAC1C,OCJa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDGxB,CAAeA,IEJT,SAA+BA,EAAKC,GACjD,GAAMG,OAAOC,YAAYC,OAAON,IAAgD,uBAAxCM,OAAOC,UAAUC,SAASC,KAAKT,GAAvE,CAIA,IAAIU,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKhB,EAAII,OAAOC,cAAmBM,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAETnB,GAAKS,EAAKW,SAAWpB,GAH8CU,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFvBuB,CAAqBV,EAAKC,IGJ3C,WACb,MAAM,IAAIsB,UAAU,wDHG0C,GAJhE,mC,mEIAaC,EAAW,CACtBC,QAAS,CACPC,MAAO,UACPC,SACE,2/BACFC,KAAM,CACJ,CACEF,MAAO,QACPE,KAAK,+hCA0BP,CACEF,MAAO,UACPE,KAAK,4nBC9BAC,EAA6B,SAAC,GAAc,IAAZD,EAAW,EAAXA,KAAW,EACpBE,mBAAiBF,EAAK,GAAGF,OADL,mBAC/CK,EAD+C,KACpCC,EADoC,KAEtD,OACE,oCACE,wBAAIC,UAAU,gBACXL,EAAKM,KAAI,WAAiBjC,GAAe,IAA7ByB,EAA4B,EAA5BA,MACX,OACE,wBACES,IAAKlC,EACLgC,UAAU,WACVG,QAAS,kBAAMJ,EAAaN,KAE5B,0BACEO,UAAS,mBAAcF,IAAcL,EAAQ,SAAW,KAEvDA,QAOX,yBAAKO,UAAU,cAAcI,GAAG,gBAC7BT,EAAKM,KAAI,WAAuBjC,GAAe,IAAnC2B,EAAkC,EAAlCA,KAAMF,EAA4B,EAA5BA,MACjB,OACE,yBACES,IAAKlC,EACLgC,UAAS,wBACPF,IAAcL,EAAQ,cAAgB,IAExCY,KAAK,YAEL,6BAAMV,UC6BLW,UA/DC,WAAO,IAAD,EACYT,mBAAiB,UAD7B,mBACbU,EADa,KACHC,EADG,OAEcX,mBAAiB,UAF/B,mBAEbY,EAFa,KAEFC,EAFE,OAGQb,mBAAiB,IAHzB,mBAGbc,EAHa,KAGLC,EAHK,OAIYf,oBAAkB,GAJ9B,mBAIbgB,EAJa,KAIHC,EAJG,KAMpBC,qBAAU,WACRvB,EAAQe,EAAUE,KACjB,CAACF,EAAUE,IAEd,IAAMjB,EAAU,SAACwB,EAAiBC,GAChC,IAAMC,EAAsBF,EACzBG,QAAQ,SAAU,IAClBC,cACAC,MAAM,IAEHC,EAAsBL,EACzBE,QAAQ,SAAU,IAClBC,cACAC,MAAM,IAET,GAAIH,EAAK9B,SAAWkC,EAAKlC,OAAzB,CAKA,IAAMmC,EAAQL,EAAKM,QAAO,SAACxD,GAAD,OAAOsD,EAAKG,SAASzD,MAAIoB,SAAW8B,EAAK9B,OAC7DsC,EAASJ,EAAKE,QAAO,SAACxD,GAAD,OAAOkD,EAAKO,SAASzD,MAAIoB,SAAWkC,EAAKlC,OACpEuC,QAAQC,IAAIL,EAAOG,GAEfd,EADJW,GAASG,EACK,oFACA,6GATZd,EAAU,yGAYd,OACE,yBAAKZ,UAAU,WACb,uCACA,2BAAIT,EAASC,QAAQE,UAErB,2BACEmC,KAAK,OACL1C,MAAOoB,EACPuB,SAAU,gBAAa3C,EAAb,EAAG4C,OAAU5C,MAAb,OAA2BqB,EAAYrB,MAEnD,2BACE0C,KAAK,OACL1C,MAAOsB,EACPqB,SAAU,gBAAa3C,EAAb,EAAG4C,OAAU5C,MAAb,OAA2BuB,EAAavB,MAGpD,wCAAcwB,GACd,4BACEX,UAAU,kBACVG,QAAS,kBAAMW,GAAaD,KAE1BA,EAAyB,YAAd,aAGdA,GAAY,kBAAC,EAAD,CAAMlB,KAAMJ,EAASC,QAAQG","file":"static/js/4.2b06c67d.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","export const CODE_OBG = {\r\n  anagram: {\r\n    title: \"Anagram\",\r\n    question:\r\n      \"Нужно написать функцию, которая проверяет, являются ли две строки анаграммами, причем регистр букв не имеет значения. Учитываются лишь символы; пробелы или знаки препинания в расчет не берутся. finder and Friend\",\r\n    code: [\r\n      {\r\n        title: \"React\",\r\n        code: `\r\n        const anagram = (string1: string, string2: string) => {\r\n          const str1: Array<string> = string1\r\n            .replace(/[^\\w]/g, \"\")\r\n            .toLowerCase()\r\n            .split(\"\");\r\n            \r\n          const str2: Array<string> = string2\r\n            .replace(/[^\\w]/g, \"\")\r\n            .toLowerCase()\r\n            .split(\"\");\r\n        \r\n          if (str1.length !== str2.length) {\r\n            setResult(\"Нет, это не анаграма\");\r\n            return;\r\n          }\r\n        \r\n          const first = str1.filter((i) => str2.includes(i)).length === str1.length;\r\n          const second = str2.filter((i) => str1.includes(i)).length === str2.length;\r\n        \r\n          first && second\r\n            ? setResult(\"Да, это анаграма\")\r\n            : setResult(\"Нет, это не анаграма\");\r\n        };      \r\n    `,\r\n      },\r\n      {\r\n        title: \"Vanilla\",\r\n        code: `\r\n        function anagram(str1 = \"finder\", str2 = \"Friend\") {\r\n          str1 = str1\r\n            .replace(/[^\\w]/g, \"\")\r\n            .toLowerCase()\r\n            .split(\"\");\r\n        \r\n          str2 = str2\r\n            .replace(/[^\\w]/g, \"\")\r\n            .toLowerCase()\r\n            .split(\"\");\r\n        \r\n          if (str1.length !== str2.length) {\r\n            return false;\r\n          }\r\n        \r\n          const first = str1.filter(i => str2.includes(i)).length === str1.length;\r\n          const second = str2.filter(i => str1.includes(i)).length === str2.length;\r\n        \r\n          return first && second;\r\n        }\r\n  `,\r\n      },\r\n    ],\r\n  },\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\ninterface ITabsProps {\r\n  [key: string]: any;\r\n}\r\n\r\nexport const Tabs: React.FC<ITabsProps> = ({ code }) => {\r\n  const [activeTab, setActiveTab] = useState<string>(code[0].title);\r\n  return (\r\n    <>\r\n      <ul className=\"nav nav-tabs\">\r\n        {code.map(({ title }: any, i: number) => {\r\n          return (\r\n            <li\r\n              key={i}\r\n              className=\"nav-item\"\r\n              onClick={() => setActiveTab(title)}\r\n            >\r\n              <span\r\n                className={`nav-link ${activeTab === title ? \"active\" : \"\"}`}\r\n              >\r\n                {title}\r\n              </span>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n\r\n      <div className=\"tab-content\" id=\"myTabContent\">\r\n        {code.map(({ code, title }: any, i: number) => {\r\n          return (\r\n            <div\r\n              key={i}\r\n              className={`tab-pane fade ${\r\n                activeTab === title ? \"show active\" : \"\"\r\n              }`}\r\n              role=\"tabpanel\"\r\n            >\r\n              <pre>{code}</pre>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { CODE_OBG } from \"./code\";\r\nimport { Tabs } from \"../common/Tabs/Tabs\";\r\n\r\nconst Anagram = () => {\r\n  const [inputVal, setInputVal] = useState<string>(\"finder\");\r\n  const [inputVal2, setInputVal2] = useState<string>(\"Friend\");\r\n  const [result, setResult] = useState<string>(\"\");\r\n  const [showCode, setShowCode] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    anagram(inputVal, inputVal2);\r\n  }, [inputVal, inputVal2]);\r\n\r\n  const anagram = (string1: string, string2: string) => {\r\n    const str1: Array<string> = string1\r\n      .replace(/[^\\w]/g, \"\")\r\n      .toLowerCase()\r\n      .split(\"\");\r\n\r\n    const str2: Array<string> = string2\r\n      .replace(/[^\\w]/g, \"\")\r\n      .toLowerCase()\r\n      .split(\"\");\r\n\r\n    if (str1.length !== str2.length) {\r\n      setResult(\"Нет, это не анаграма\");\r\n      return;\r\n    }\r\n\r\n    const first = str1.filter((i) => str2.includes(i)).length === str1.length;\r\n    const second = str2.filter((i) => str1.includes(i)).length === str2.length;\r\n    console.log(first, second);\r\n    first && second\r\n      ? setResult(\"Да, это анаграма\")\r\n      : setResult(\"Нет, это не анаграма\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"Anagram\">\r\n      <h3>Anagram</h3>\r\n      <p>{CODE_OBG.anagram.question}</p>\r\n\r\n      <input\r\n        type=\"text\"\r\n        value={inputVal}\r\n        onChange={({ target: { value } }) => setInputVal(value)}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        value={inputVal2}\r\n        onChange={({ target: { value } }) => setInputVal2(value)}\r\n      />\r\n\r\n      <div>Result: {result}</div>\r\n      <button\r\n        className=\"btn btn-success\"\r\n        onClick={() => setShowCode(!showCode)}\r\n      >\r\n        {!showCode ? \"Show code\" : \"Hide code\"}\r\n      </button>\r\n\r\n      {showCode && <Tabs code={CODE_OBG.anagram.code} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Anagram;\r\n"],"sourceRoot":""}