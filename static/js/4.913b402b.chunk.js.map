{"version":3,"sources":["components/Functions/code.ts","components/common/Tabs/Tabs.tsx","components/Functions/Anagram.tsx"],"names":["CODE_OBG","anagram","title","question","code","Tabs","useState","activeTab","setActiveTab","className","map","i","key","onClick","id","role","Anagram","inputVal","setInputVal","inputVal2","setInputVal2","result","setResult","showCode","setShowCode","useEffect","string1","string2","str1","replace","toLowerCase","split","str2","length","first","filter","includes","second","console","log","type","value","onChange","target"],"mappings":"iKAAaA,EAAW,CACtBC,QAAS,CACPC,MAAO,UACPC,SACE,2/BACFC,KAAM,CACJ,CACEF,MAAO,QACPE,KAAK,+hCA0BP,CACEF,MAAO,UACPE,KAAK,4nBC9BAC,EAA6B,SAAC,GAAc,IAAZD,EAAW,EAAXA,KAAW,EACpBE,mBAAiBF,EAAK,GAAGF,OADL,mBAC/CK,EAD+C,KACpCC,EADoC,KAEtD,OACE,oCACE,wBAAIC,UAAU,gBACXL,EAAKM,KAAI,WAAiBC,GAAe,IAA7BT,EAA4B,EAA5BA,MACX,OACE,wBACEU,IAAKD,EACLF,UAAU,WACVI,QAAS,kBAAML,EAAaN,KAE5B,0BACEO,UAAS,mBAAcF,IAAcL,EAAQ,SAAW,KAEvDA,QAOX,yBAAKO,UAAU,cAAcK,GAAG,gBAC7BV,EAAKM,KAAI,WAAuBC,GAAe,IAAnCP,EAAkC,EAAlCA,KAAMF,EAA4B,EAA5BA,MACjB,OACE,yBACEU,IAAKD,EACLF,UAAS,wBACPF,IAAcL,EAAQ,cAAgB,IAExCa,KAAK,YAEL,6BAAMX,UC6BLY,UA/DC,WAAO,IAAD,EACYV,mBAAiB,UAD7B,mBACbW,EADa,KACHC,EADG,OAEcZ,mBAAiB,UAF/B,mBAEba,EAFa,KAEFC,EAFE,OAGQd,mBAAiB,IAHzB,mBAGbe,EAHa,KAGLC,EAHK,OAIYhB,oBAAkB,GAJ9B,mBAIbiB,EAJa,KAIHC,EAJG,KAMpBC,qBAAU,WACRxB,EAAQgB,EAAUE,KACjB,CAACF,EAAUE,IAEd,IAAMlB,EAAU,SAACyB,EAAiBC,GAChC,IAAMC,EAAsBF,EACzBG,QAAQ,SAAU,IAClBC,cACAC,MAAM,IAEHC,EAAsBL,EACzBE,QAAQ,SAAU,IAClBC,cACAC,MAAM,IAET,GAAIH,EAAKK,SAAWD,EAAKC,OAAzB,CAKA,IAAMC,EAAQN,EAAKO,QAAO,SAACxB,GAAD,OAAOqB,EAAKI,SAASzB,MAAIsB,SAAWL,EAAKK,OAC7DI,EAASL,EAAKG,QAAO,SAACxB,GAAD,OAAOiB,EAAKQ,SAASzB,MAAIsB,SAAWD,EAAKC,OACpEK,QAAQC,IAAIL,EAAOG,GAEff,EADJY,GAASG,EACK,oFACA,6GATZf,EAAU,yGAYd,OACE,yBAAKb,UAAU,WACb,uCACA,2BAAIT,EAASC,QAAQE,UAErB,2BACEqC,KAAK,OACLC,MAAOxB,EACPyB,SAAU,gBAAaD,EAAb,EAAGE,OAAUF,MAAb,OAA2BvB,EAAYuB,MAEnD,2BACED,KAAK,OACLC,MAAOtB,EACPuB,SAAU,gBAAaD,EAAb,EAAGE,OAAUF,MAAb,OAA2BrB,EAAaqB,MAGpD,wCAAcpB,GACd,4BACEZ,UAAU,kBACVI,QAAS,kBAAMW,GAAaD,KAE1BA,EAAyB,YAAd,aAGdA,GAAY,kBAAC,EAAD,CAAMnB,KAAMJ,EAASC,QAAQG","file":"static/js/4.913b402b.chunk.js","sourcesContent":["export const CODE_OBG = {\r\n  anagram: {\r\n    title: \"Anagram\",\r\n    question:\r\n      \"Нужно написать функцию, которая проверяет, являются ли две строки анаграммами, причем регистр букв не имеет значения. Учитываются лишь символы; пробелы или знаки препинания в расчет не берутся. finder and Friend\",\r\n    code: [\r\n      {\r\n        title: \"React\",\r\n        code: `\r\n        const anagram = (string1: string, string2: string) => {\r\n          const str1: Array<string> = string1\r\n            .replace(/[^\\w]/g, \"\")\r\n            .toLowerCase()\r\n            .split(\"\");\r\n            \r\n          const str2: Array<string> = string2\r\n            .replace(/[^\\w]/g, \"\")\r\n            .toLowerCase()\r\n            .split(\"\");\r\n        \r\n          if (str1.length !== str2.length) {\r\n            setResult(\"Нет, это не анаграма\");\r\n            return;\r\n          }\r\n        \r\n          const first = str1.filter((i) => str2.includes(i)).length === str1.length;\r\n          const second = str2.filter((i) => str1.includes(i)).length === str2.length;\r\n        \r\n          first && second\r\n            ? setResult(\"Да, это анаграма\")\r\n            : setResult(\"Нет, это не анаграма\");\r\n        };      \r\n    `,\r\n      },\r\n      {\r\n        title: \"Vanilla\",\r\n        code: `\r\n        function anagram(str1 = \"finder\", str2 = \"Friend\") {\r\n          str1 = str1\r\n            .replace(/[^\\w]/g, \"\")\r\n            .toLowerCase()\r\n            .split(\"\");\r\n        \r\n          str2 = str2\r\n            .replace(/[^\\w]/g, \"\")\r\n            .toLowerCase()\r\n            .split(\"\");\r\n        \r\n          if (str1.length !== str2.length) {\r\n            return false;\r\n          }\r\n        \r\n          const first = str1.filter(i => str2.includes(i)).length === str1.length;\r\n          const second = str2.filter(i => str1.includes(i)).length === str2.length;\r\n        \r\n          return first && second;\r\n        }\r\n  `,\r\n      },\r\n    ],\r\n  },\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\ninterface ITabsProps {\r\n  [key: string]: any;\r\n}\r\n\r\nexport const Tabs: React.FC<ITabsProps> = ({ code }) => {\r\n  const [activeTab, setActiveTab] = useState<string>(code[0].title);\r\n  return (\r\n    <>\r\n      <ul className=\"nav nav-tabs\">\r\n        {code.map(({ title }: any, i: number) => {\r\n          return (\r\n            <li\r\n              key={i}\r\n              className=\"nav-item\"\r\n              onClick={() => setActiveTab(title)}\r\n            >\r\n              <span\r\n                className={`nav-link ${activeTab === title ? \"active\" : \"\"}`}\r\n              >\r\n                {title}\r\n              </span>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n\r\n      <div className=\"tab-content\" id=\"myTabContent\">\r\n        {code.map(({ code, title }: any, i: number) => {\r\n          return (\r\n            <div\r\n              key={i}\r\n              className={`tab-pane fade ${\r\n                activeTab === title ? \"show active\" : \"\"\r\n              }`}\r\n              role=\"tabpanel\"\r\n            >\r\n              <pre>{code}</pre>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { CODE_OBG } from \"./code\";\r\nimport { Tabs } from \"../common/Tabs/Tabs\";\r\n\r\nconst Anagram = () => {\r\n  const [inputVal, setInputVal] = useState<string>(\"finder\");\r\n  const [inputVal2, setInputVal2] = useState<string>(\"Friend\");\r\n  const [result, setResult] = useState<string>(\"\");\r\n  const [showCode, setShowCode] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    anagram(inputVal, inputVal2);\r\n  }, [inputVal, inputVal2]);\r\n\r\n  const anagram = (string1: string, string2: string) => {\r\n    const str1: Array<string> = string1\r\n      .replace(/[^\\w]/g, \"\")\r\n      .toLowerCase()\r\n      .split(\"\");\r\n\r\n    const str2: Array<string> = string2\r\n      .replace(/[^\\w]/g, \"\")\r\n      .toLowerCase()\r\n      .split(\"\");\r\n\r\n    if (str1.length !== str2.length) {\r\n      setResult(\"Нет, это не анаграма\");\r\n      return;\r\n    }\r\n\r\n    const first = str1.filter((i) => str2.includes(i)).length === str1.length;\r\n    const second = str2.filter((i) => str1.includes(i)).length === str2.length;\r\n    console.log(first, second);\r\n    first && second\r\n      ? setResult(\"Да, это анаграма\")\r\n      : setResult(\"Нет, это не анаграма\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"Anagram\">\r\n      <h3>Anagram</h3>\r\n      <p>{CODE_OBG.anagram.question}</p>\r\n\r\n      <input\r\n        type=\"text\"\r\n        value={inputVal}\r\n        onChange={({ target: { value } }) => setInputVal(value)}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        value={inputVal2}\r\n        onChange={({ target: { value } }) => setInputVal2(value)}\r\n      />\r\n\r\n      <div>Result: {result}</div>\r\n      <button\r\n        className=\"btn btn-success\"\r\n        onClick={() => setShowCode(!showCode)}\r\n      >\r\n        {!showCode ? \"Show code\" : \"Hide code\"}\r\n      </button>\r\n\r\n      {showCode && <Tabs code={CODE_OBG.anagram.code} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Anagram;\r\n"],"sourceRoot":""}